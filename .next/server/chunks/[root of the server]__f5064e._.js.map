{
  "version": 3,
  "sources": [],
  "sections": [
    {"offset": {"line": 55, "column": 0}, "map": {"version":3,"sources":["file://D%3A/repo/New%20folder/blockviz-main/src/services/etherscan.ts"],"sourcesContent":["import { EtherscanTransaction,TransactionTableData,TransactionType,EtherscanBalance,WalletBalance } from \"@/types/api\";\nimport { GraphData, Node, Link, ForceGraphNode } from \"@/types/graph\";\n\n  const CONFIG = {\n    MAX_TRANSACTIONS: 200,\n    NODE_SIZES: {\n      CENTER: 4,\n      NORMAL: 2,\n    },\n    WEI_TO_ETH: 1e18,\n    CURVATURE: 0.05 \n  } as const;\n\n  export async function fetchEtherscanWalletBalance(\n    address: string,\n    apiKey: string\n  ): Promise<EtherscanBalance> {\n    if (!apiKey) {\n      throw new Error(\"Etherscan API key not configured\");\n    }\n    const response = await fetch(`https://api.etherscan.io/api?module=account&action=balance&address=${address}&tag=latest&apikey=${apiKey}`);\n    if (!response.ok) {\n      throw new Error(`Etherscan API error: ${response.status}`);\n    }\n    const data = await response.json();\n    if (data.status !== \"1\") {\n      throw new Error(data.message || \"Invalid response from Etherscan\");\n    }\n    // const result = data.map((a: EtherscanBalance) => ({result: a.result,address:address}));\n    return data.result;\n  }\n  \n  export async function fetchEtherscanTransactions(\n    address: string, \n    apiKey: string\n  ): Promise<EtherscanTransaction[]> {\n    if (!apiKey) {\n      throw new Error(\"Etherscan API key not configured\");\n    }\n  \n    const response = await fetch(\n      `https://api.etherscan.io/api?module=account&action=txlist&address=${address}&startblock=0&endblock=99999999&sort=desc&apikey=${apiKey}`\n    );\n  \n    if (!response.ok) {\n      throw new Error(`Etherscan API error: ${response.status}`);\n    }\n  \n    const data = await response.json();\n    // console.log(\"total transactions: \",data.result.length);\n    if (data.status !== \"1\" || !Array.isArray(data.result)) {\n      throw new Error(data.message || \"Invalid response from Etherscan\");\n    }\n  \n    // return data.result.slice(0, CONFIG.MAX_TRANSACTIONS);\n    return data.result;\n  }\n  \n  export function transformToGraphData(\n    transactions: EtherscanTransaction[], \n    centerAddress: string\n  ): GraphData {\n    // console.log('Input transactions:', transactions.length);\n    const normalizedCenterAddress = centerAddress.toLowerCase();\n    const nodes = new Map<string, Node>();\n    const linksMap = new Map<string, Link>();\n  \n    // Add center node\n    nodes.set(normalizedCenterAddress, {\n      id: normalizedCenterAddress,\n      val: CONFIG.NODE_SIZES.CENTER,\n      isCenter: true,\n      totalTransactions: 0,\n      totalReceived: 0,\n      totalSent: 0,\n      x: 0,\n      y: 0\n    });\n  \n    // Process transactions\n    transactions.forEach(tx => {\n      const fromAddress = tx.from.toLowerCase();\n      const toAddress = tx.to?.toLowerCase();\n      const value = parseFloat(tx.value) / CONFIG.WEI_TO_ETH;\n  \n      // Skip only if toAddress is undefined\n      if (!toAddress) return;\n  \n      // Add or update nodes\n      if (!nodes.has(fromAddress)) {\n        nodes.set(fromAddress, {\n          id: fromAddress,\n          val: CONFIG.NODE_SIZES.NORMAL,\n          isCenter: false,\n          totalTransactions: 0,\n          totalReceived: 0,\n          totalSent: 0,\n          x: 0,\n          y: 0\n        });\n      }\n  \n      if (!nodes.has(toAddress)) {\n        nodes.set(toAddress, {\n          id: toAddress,\n          val: CONFIG.NODE_SIZES.NORMAL,\n          isCenter: false,\n          totalTransactions: 0,\n          totalReceived: 0,\n          totalSent: 0,\n          x: 0,\n          y: 0\n        });\n      }\n  \n      // Create link\n      const link: Link = {\n        id: tx.hash,\n        source: fromAddress,\n        target: toAddress,\n        val: value,\n        hash: tx.hash,\n        timestamp: tx.timeStamp,\n        gasPrice: tx.gasPrice,\n        gasUsed: tx.gasUsed,\n        methodId: tx.methodId,\n        functionName: tx.functionName\n      };\n  \n      linksMap.set(tx.hash, link);\n  \n      // Update node statistics\n      const fromNode = nodes.get(fromAddress)!;\n      const toNode = nodes.get(toAddress)!;\n  \n      fromNode.totalTransactions = (fromNode.totalTransactions || 0) + 1;\n      fromNode.totalSent = (fromNode.totalSent || 0) + value;\n  \n      toNode.totalTransactions = (toNode.totalTransactions || 0) + 1;\n      toNode.totalReceived = (toNode.totalReceived || 0) + value;\n    });\n  \n    const nodeArray = Array.from(nodes.values());\n    const linkArray = Array.from(linksMap.values()).map((link, index, array) => ({\n      ...link,\n      curvature: (index - array.length/2) * CONFIG.CURVATURE\n    }));;\n  \n    // console.log('Transformation results:', {\n    //   inputTransactions: transactions.length,\n    //   outputNodes: nodeArray.length,\n    //   outputLinks: linkArray.length\n    // });\n  \n    return {\n      nodes: nodeArray as ForceGraphNode[],\n      links: linkArray,\n      metadata: {\n        dataSource: 'etherscan' as const,\n        totalTransactions: linkArray.length,\n        uniqueAddresses: nodeArray.length,\n        centerAddress: normalizedCenterAddress,\n        totalValue: linkArray.reduce((sum, link) => sum + link.val, 0)\n      }\n    };\n  }\n  export function transformToTransactionTableData(\n    transactions: EtherscanTransaction[],\n    centerAddress: string\n  ): TransactionTableData[] {\n    const normalizedCenterAddress = centerAddress.toLowerCase();\n    \n    return transactions.map(tx => {\n      const fromAddress = tx.from.toLowerCase();\n      const toAddress = tx.to?.toLowerCase() ?? '';\n      \n      // Calculate transaction type\n      const type: TransactionType = fromAddress === normalizedCenterAddress \n        ? 'outgoing' \n        : 'incoming';\n  \n      // Calculate amount in ETH\n      const amount = (parseFloat(tx.value) / CONFIG.WEI_TO_ETH).toFixed(6);\n  \n      // Calculate gas cost in ETH\n      // Calculate gas cost in ETH using BigInt\n      const gasCostInWei = BigInt(tx.gasUsed) * BigInt(tx.gasPrice);\n      const gasCostInEth = (\n        (gasCostInWei * BigInt(1000000)) / BigInt(CONFIG.WEI_TO_ETH)\n        ).toString();\n      const formattedGasCost = (parseInt(gasCostInEth) / 1000000).toFixed(6);\n  \n      // Format UTC timestamp\n      const utcTimestamp = new Date(parseInt(tx.timeStamp) * 1000)\n        .toISOString()\n        .replace('T', ' ')\n        .slice(0, 19) + ' UTC';\n  \n      return {\n        type,\n        hash: tx.hash,\n        amount: `${amount} ETH`,\n        from: fromAddress,\n        to: toAddress,\n        timestamp: utcTimestamp,\n        status: tx.isError === '0' ? 'success' : 'failed',\n        gasUsed: `${formattedGasCost} ETH`\n      };\n    });\n  }\n\n  export function transformToWalletBalance(address:string,balanceData:string):WalletBalance{\n    try {\n      // Ensure we have a valid balance string\n      if (!balanceData) {\n        return {\n          address: address,\n          balance: {\n            eth: \"0.000000\",\n          },\n        };\n      }\n    // Convert wei to ETH\n    const balanceInEth = (\n      BigInt(balanceData) * BigInt(1000000) / BigInt(CONFIG.WEI_TO_ETH)\n    ).toString();\n  \n    // Convert to number with 6 decimal places\n    const formattedBalance = (parseInt(balanceInEth) / 1000000).toFixed(6);\n\n    return {\n      address:address,\n      balance: {\n        eth: formattedBalance,\n      },\n    };\n  }catch (error) {\n    console.error(\"Error transforming wallet balance:\", error);\n    return {\n      address: address,\n      balance: {\n        eth: \"0.000000\",\n      },\n    };\n  }\n}"],"names":[],"mappings":"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"}},
    {"offset": {"line": 254, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}},
    {"offset": {"line": 260, "column": 0}, "map": {"version":3,"sources":["file://D%3A/repo/New%20folder/blockviz-main/src/app/api/addresses/%5Baddress%5D/balance/route.ts"],"sourcesContent":["import { NextResponse } from 'next/server';\nimport { z } from 'zod';\nimport { fetchEtherscanWalletBalance, transformToWalletBalance } from '@/services/etherscan';\n\nconst addressSchema = z.string().regex(/^0x[a-fA-F0-9]{40}$/);\n\nconst {ETHERSCAN_API_KEY} = process.env;\n\nexport async function GET(\n    request: Request,\n    {params}: {params: Promise<{address: string}>}\n) {\n    try {\n        const { address } = await params;\n        const validatedAddress = addressSchema.parse(address.toLowerCase());\n\n    if (!ETHERSCAN_API_KEY) {\n        return NextResponse.json({error: 'Etherscan API key not configured'}, {status: 500});\n    }\n    const etherscanData = await fetchEtherscanWalletBalance(validatedAddress,ETHERSCAN_API_KEY);\n    console.log(etherscanData);\n    const balanceData = transformToWalletBalance(validatedAddress,etherscanData);\n    console.log(balanceData);\n    return NextResponse.json(balanceData);\n    } catch (error) {\n        console.error('Error fetching wallet balance:', error);\n        return NextResponse.json(\n            { \n              error: error instanceof Error ? error.message : 'Failed to fetch wallet balance' \n            },\n            { status: 500 }\n          );\n    }\n}"],"names":[],"mappings":";;;AAAA;AAEA;AADA;;;;AAGA,MAAM,gBAAgB,sIAAA,CAAA,IAAC,CAAC,MAAM,GAAG,KAAK,CAAC;AAEvC,MAAM,EAAC,iBAAiB,EAAC,GAAG,QAAQ,GAAG;AAEhC,eAAe,IAClB,OAAgB,EAChB,EAAC,MAAM,EAAuC;IAE9C,IAAI;QACA,MAAM,EAAE,OAAO,EAAE,GAAG,MAAM;QAC1B,MAAM,mBAAmB,cAAc,KAAK,CAAC,QAAQ,WAAW;QAEpE,IAAI,CAAC,mBAAmB;YACpB,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;gBAAC,OAAO;YAAkC,GAAG;gBAAC,QAAQ;YAAG;QACtF;QACA,MAAM,gBAAgB,MAAM,CAAA,GAAA,8HAAA,CAAA,8BAA2B,AAAD,EAAE,kBAAiB;QACzE,QAAQ,GAAG,CAAC;QACZ,MAAM,cAAc,CAAA,GAAA,8HAAA,CAAA,2BAAwB,AAAD,EAAE,kBAAiB;QAC9D,QAAQ,GAAG,CAAC;QACZ,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CAAC;IACzB,EAAE,OAAO,OAAO;QACZ,QAAQ,KAAK,CAAC,kCAAkC;QAChD,OAAO,gIAAA,CAAA,eAAY,CAAC,IAAI,CACpB;YACE,OAAO,iBAAiB,QAAQ,MAAM,OAAO,GAAG;QAClD,GACA;YAAE,QAAQ;QAAI;IAEtB;AACJ"}},
    {"offset": {"line": 296, "column": 0}, "map": {"version":3,"sources":[],"names":[],"mappings":"A"}}]
}